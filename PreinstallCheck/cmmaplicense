# (c) Copyright 2023 Hewlett Packard Enterprise Development LP
# All rights reserved
# version 2.5
#!/bin/bash

typeset -i cores_supported_per_license=2
typeset -i vcpus_supported_per_license=4
typeset -i cores=0;
typeset -i license_required=0;
typeset -i sg_flag=0;

typeset -x newline_char=$'\n'
typeset -x bullet_char="*"

typeset -i NFS_Add_on_count=0;
typeset -i SAP_Add_on_count=0;
typeset -i Oracle_Add_on_count=0
typeset -i MSSQL_Add_on_count=0
typeset -i Flex_Storage_Add_on_count=0
typeset -i HA_DR_E7_count=0
typeset -i HA_E5_count=0

typeset -i exi_HA_E5_count=0
typeset -i exi_NFS_Add_on_count=0;
typeset -i exi_SAP_Add_on_count=0;
typeset -i exi_Oracle_Add_on_count=0
typeset -i exi_MSSQL_Add_on_count=0
typeset -i exi_Flex_Storage_Add_on_count=0
typeset -i exi_HA_DR_E7_count=0
typeset -i exi_Instant_on_count=0
typeset -i exi_Base_count=0
typeset -i exi_Advance_count=0
typeset -i exi_Enterprise_count=0
typeset -i exi_Premium_count=0

typeset -i node_HA_E5_count=0
typeset -i node_NFS_Add_on_count=0;
typeset -i node_SAP_Add_on_count=0;
typeset -i node_Oracle_Add_on_count=0
typeset -i node_MSSQL_Add_on_count=0
typeset -i node_Flex_Storage_Add_on_count=0
typeset -i node_HA_DR_E7_count=0
typeset -i node_Instant_On_count=0
typeset -i node_Base_count=0
typeset -i node_Advance_count=0
typeset -i node_Enterprise_count=0
typeset -i node_Premium_count=0

n_flag=0
cluster_license_count=0

#this code is reused from tools/cmcomputelicense of SGCORE
#if there are any changes please modify in the other location as well
function calculate_license_req
{
    curr_node=$(host=`hostname`; echo ${host%%.*})
    SG_VIRTUAL_NODE_TYPE=`echo "$view" | awk -F "[ :|=]" '$1 == "node" && $2 == "'$node'" && $3 == "virt_tech" {print $4}'`

    if [[ $SG_VIRTUAL_NODE_TYPE == "none" ]]; then
        # It is a physical system.
        NODE_TYPE="PHYSICAL"
    else
        NODE_TYPE="VM"
    fi
    cores=0
    if [[ $NODE_TYPE != "VM" ]]; then    #physical node
        vm_flag=0
        if [[ $curr_node != $node ]]; then
            sock=`cmexec $node "grep \"^physical id\" /proc/cpuinfo | sort -u"  2> /dev/null`
            for i in $sock
            do
                core_val=`cmexec $node "grep -m 1 -A 5 -w \"^physical id[[:space:]]: $i\" /proc/cpuinfo 2> /dev/null | head -5 | grep \"^cpu cores\"" `
                core_val=`echo $core_val |awk '{print $NF}'`
                ((cores = cores + core_val ))
            done
            if [[ -z $sock || $cores -eq 0 ]];then
                echo_n "Unable to calculate the license required for $node. Execute cmmaplicense directly on $node."
                echo_n
                echo_f "node:$node|compute_type=core"
                echo_f "node:$node|compute_type=cores|cores=ComputeError"
                return 1
            fi
        else
            for i in `grep "^physical id" /proc/cpuinfo | sort -u |awk '{print $NF}'`
            do
                ((cores = cores + `grep -m 1 -A 5 -w "^physical id[[:space:]]: $i" /proc/cpuinfo 2> /dev/null | head -5 | grep -w "^cpu cores" | awk '{print $NF}'`));
            done
        fi
        license_required=`expr '(' $cores '+' $cores_supported_per_license '-' 1 ')' '/' $cores_supported_per_license`
    else #vm
        vm_flag=1
        if [[ $curr_node != $node ]]; then
            vcpu=`cmexec $node "grep -w ^processor /proc/cpuinfo | wc -l"  2> /dev/null`
            if [[ $vcpu -eq 0 ]];then
                echo_n "Unable to calculate the license required for $node. Execute cmmaplicense directly on $node."
                echo_f "node:$node|compute_type=vcpu"
                echo_f "node:$node|compute_type=vcpu|vcpu=ComputeError"
                return 1
            fi
        else
            vcpu=`grep -w ^processor /proc/cpuinfo | wc -l`
        fi
        license_required=`expr '(' $vcpu '+' $vcpus_supported_per_license '-' 1 ')' '/'  $vcpus_supported_per_license`
    fi
}

view=`cmviewcl -vf line -s config 2> /dev/null`
if [[ -z $view ]]; then
    sg_flag=0
else
    sg_flag=1
fi

#check if cluster exists
function check_for_cluster
{
    node=$1
    curr_node=$(host=`hostname`; echo ${host%%.*})
    if [[ ! -z "$node" && $node != $curr_node ]]; then
        view=`ssh $node cmviewcl -vf line -s config 2> /dev/null`
        if [[ $? -ge 255 ]]; then
            echo_n "Node: $node"
            echo_n "Unable to connect to $node. Execute cmmaplicense directly on $node."
            echo_f "node:$node|compute_type=SSHError"
            return 1
        fi
        cmversion=`ssh $node cmversion 2> /dev/null`
    fi
    if [[ -z "$view" ]]; then
        if [[ -z $node ]]; then
            node=$curr_node
            echo_n "Node: $curr_node"
            echo_n "Current Serviceguard configuration on $curr_node"            
            
            if ! [[ -z "$cmversion" ]]; then
                echo_n "Serviceguard version installed: $cmversion"
            else
                echo_n "Serviceguard is not installed"
            fi
        else
            echo_n "Node: $node"
            echo_n "Current Serviceguard configuration on $node"
            if ! [[ -z "$cmversion" ]]; then
                echo_n "Serviceguard version installed: $cmversion"
            else
                echo_n "Serviceguard is not installed"
            fi
        fi
        echo_n "HPE Serviceguard cluster does not exist. No workloads detected."
        echo_n
        echo_n "Checking the node configuration..."
        #have a temp file to store node details
        export tmp_mapfile="/var/tmp/map.txt"
        #check if file exists
        if [[ -f $tmpfile ]]; then
            rm -f $tmpfile
        fi
        #create file and give access
        touch $tmp_mapfile
        chmod 644 $tmp_mapfile
        if [[ -z "$node" || $curr_node == $node ]]; then #current node
            #store the output to a file
            `hostnamectl > $tmp_mapfile`
            node_type=`cat $tmp_mapfile | tr -d ' ' |awk -F':' '$1 == "Virtualization" {print $2}'`
            if ! [[ -z "$node_type" ]]; then
                NODE_TYPE="vm"
            else
                NODE_TYPE="physical"
            fi
            if [[ $NODE_TYPE == "vm" ]]; then
                vcpu=`grep -w ^processor /proc/cpuinfo | wc -l`
                license_required=`expr '(' $vcpu '+' $vcpus_supported_per_license '-' 1 ')' '/'  $vcpus_supported_per_license`
                echo_n "Number of vCPU(s) : $vcpu"
                echo_f "node:$node|compute_type=vcpu"
                echo_f "node:$node|compute_type=vcpu|vcpus=$vcpu"
            else
                cores=0
                for i in `grep "^physical id" /proc/cpuinfo | sort -u |awk '{print $NF}'`
                do
                    ((cores = cores + `grep -m 1 -A 5 -w "^physical id[[:space:]]: $i" /proc/cpuinfo 2> /dev/null | head -5 | grep -w "^cpu cores" | awk '{print $NF}'`));
                done
                license_required=`expr '(' $cores '+' $cores_supported_per_license '-' 1 ')' '/' $cores_supported_per_license`
                echo_n "Number of Core(s) : $cores"
                echo_f "node:$node|compute_type=core"
                echo_f "node:$node|compute_type=core|cores=$cores"
            fi
            echo_n
            echo_n "For upgrading node $node to HPE Serviceguard for linux A.15.00.00 and above, requires following licenses"
            echo_n "Total number of license(s) required for $node: $license_required"
            if [[ $fline_flag -ne 1 ]]; then
                printf "    * Foundational: $license_required LTU(s) of HPE Serviceguard for linux HA-E5 or HA-DR-E7"
                echo
            fi
            echo_n "Note: Add-on license(s) might be required based on the workloads that will be deployed."
            echo_f "node:$node|license_version=NA"
            echo_f "node:$node|license_version:NA|license_details=current"
            echo_f "node:$node|license_version:NA|license_details:current|license_status=invalid"
            echo_f "node:$node|license_version:NA|license_details:current|license_genre=NA"
            echo_f "node:$node|license_version:NA|license_details:current|license_count=NA"
            echo_f "node:$node|license_version=v15"
            echo_f "node:$node|license_version:v15|license_details=required"
            echo_f "node:$node|license_version:v15|license_details:required|license_type=HA-E5 or HA-DR-E7"
            echo_f "node:$node|license_version:v15|license_details:required|license_type:HA-E5 or HA-DR-E7|license_genre=Foundational"
            echo_f "node:$node|license_version:v15|license_details:required|license_type:HA-E5 or HA-DR-E7|license_count=$license_required"
            
            #delete the file
            rm -f $tmpfile
            return 0
        else #node name is passed
            ssh $node hostnamectl > $tmp_mapfile
            node_type=`cat $tmp_mapfile | tr -d ' ' |awk -F':' '$1 == "Virtualization" {print $2}'`
            if ! [[ -z "$node_type" ]]; then
                NODE_TYPE="vm"
            else
                NODE_TYPE="physical"
            fi

            if [[ $NODE_TYPE == "vm" ]]; then
                vcpu=`ssh $node grep -w ^processor /proc/cpuinfo | wc -l  2> /dev/null`
                if [[ $vcpu -eq 0 ]]; then
                    echo_n "Unable to calculate the license required for $node. Execute cmmaplicense directly on $node."
                    echo_f "node:$node|compute_type=vcpu"
                    echo_f "node:$node|compute_type=vcpu|vcpu=ComputeError"
                    return 1
                fi
                license_required=`expr '(' $vcpu '+' $vcpus_supported_per_license '-' 1 ')' '/'  $vcpus_supported_per_license`
                echo_n "Number of vCPU(s) : $vcpu"
                echo_f "node:$node|compute_type=vcpu"
                echo_f "node:$node|compute_type=vcpu|vcpus=$vcpu"
            else
                cores=0
                for i in `ssh $node grep \"^physical id\" /proc/cpuinfo | sort -u |awk '{print $NF}' 2> /dev/null`
                do
                    core_val=`ssh $node "grep -m 1 -A 5 -w \"^physical id[[:space:]]: $i\" /proc/cpuinfo 2> /dev/null | head -5 | grep \"^cpu cores\"" `
                    core_val=`echo $core_val |awk '{print $NF}'`
                    ((cores = cores + core_val ))
                done
                if [[ $cores -eq 0 ]]; then
                    echo_n "Unable to calculate the license required for $node. Execute cmmaplicense directly on $node."
                    echo_f "node:$node|compute_type=core"
                    echo_f "node:$node|compute_type=cores|cores=ComputeError"
                    return 1
                fi
                license_required=`expr '(' $cores '+' $cores_supported_per_license '-' 1 ')' '/' $cores_supported_per_license`
                echo_n "Number of Core(s) : $cores"
                echo_f "node:$node|compute_type=core"
                echo_f "node:$node|compute_type=core|cores=$cores"
            fi
            echo_n
            echo_n "For upgrading node $node to HPE Serviceguard for linux A.15.00.00 and above, requires following licenses"
            echo_n "Total number of license(s) required for $node: $license_required"
            if [[ $fline_flag -ne 1 ]]; then
                printf "    * Foundational: $license_required LTU(s) of HPE Serviceguard for linux HA-E5 or HA-DR-E7"
                echo
            fi
            echo_n "Note: Add-on license(s) might be required based on the workloads that will be deployed."
            echo_f "node:$node|license_version=NA"
            echo_f "node:$node|license_version:NA|license_details=current"
            echo_f "node:$node|license_version:NA|license_details:current|license_status=invalid"
            echo_f "node:$node|license_version:NA|license_details:current|license_genre=NA"
            echo_f "node:$node|license_version:NA|license_details:current|license_count=NA"
            echo_f "node:$node|license_version=v15"
            echo_f "node:$node|license_version:v15|license_details=required"
            echo_f "node:$node|license_version:v15|license_details:required|license_type=HA-E5 or HA-DR-E7"
            echo_f "node:$node|license_version:v15|license_details:required|license_type:HA-E5 or HA-DR-E7|license_genre=Foundational"
            echo_f "node:$node|license_version:v15|license_details:required|license_type:HA-E5 or HA-DR-E7|license_count=$license_required"
            #delete the file
            rm -f $tmpfile
            return 0
        fi
    else
        if ! [[ -z "$node" ]]; then
            calc_license_req $node
            echo "Note: $node has a cluster, please run cmmaplicense on $node without -n option to get license details of all the nodes"
        else
            return 1
        fi
    fi
}

function save_lic_count
{
    sgver=$1
    #reset the node lic count to zero
    node_HA_E5_count=0
    node_NFS_Add_on_count=0;
    node_SAP_Add_on_count=0;
    node_Oracle_Add_on_count=0
    node_MSSQL_Add_on_count=0
    node_Flex_Storage_Add_on_count=0
    node_HA_DR_E7_count=0
    node_Advance_count=0
    node_Base_count=0
    node_Enterprise_count=0
    node_Premium_count=0
    node_Instant_On_count=0

    if [[ -z "$installed_license" ]]; then
        #no licenses installed
        return
    fi
    if [[ $sgver =~ "15." ]]; then
        lic_list=(`echo "$installed_license" | awk -F "[ :|=]" '{print $3}'`)
        count_list=(`echo "$installed_license" | awk -F "[ :|=]" '{print $NF}'`)
        for ind in ${!lic_list[@]}
        do
            echo_n "${count_list[$ind]} LTU(s) of HPE Serviceguard for linux - ${lic_list[$ind]}"
            if [[ ${lic_list[$ind]} =~ "NFS-Add-on" ]]; then
                node_NFS_Add_on_count=${count_list[$ind]}
                exi_NFS_Add_on_count=$(( $exi_NFS_Add_on_count + $node_NFS_Add_on_count ))
            elif [[ ${lic_list[$ind]} =~ "SAP-Add-on" ]]; then
                node_SAP_Add_on_count=${count_list[$ind]}
                exi_SAP_Add_on_count=$(( $exi_SAP_Add_on_count + $node_SAP_Add_on_count ))
            elif [[ ${lic_list[$ind]} =~ "Oracle-Add-on" ]]; then
                node_Oracle_Add_on_count=${count_list[$ind]}
                exi_Oracle_Add_on_count=$(( $exi_Oracle_Add_on_count + $node_Oracle_Add_on_count ))
            elif [[ ${lic_list[$ind]} =~ "MSSQL-Add-on" ]]; then
                node_MSSQL_Add_on_count=${count_list[$ind]}
                exi_MSSQL_Add_on_count=$(( $exi_MSSQL_Add_on_count + $node_MSSQL_Add_on_count ))
            elif [[ ${lic_list[$ind]} =~ "E5" ]]; then
                node_HA_E5_count=${count_list[$ind]}
                exi_HA_E5_count=$(( $exi_HA_E5_count + $node_HA_E5_count ))
            elif [[ ${lic_list[$ind]} =~ "E7" ]]; then
                node_HA_DR_E7_count=${count_list[$ind]}
                exi_HA_DR_E7_count=$(( $exi_HA_DR_E7_count + $node_HA_DR_E7_count ))
            elif [[ ${lic_list[$ind]} =~ "Flex" ]]; then
                node_Flex_Storage_Add_on_count=${count_list[$ind]}
                exi_Flex_Storage_Add_on_count=$(( $exi_Flex_Storage_Add_on_count + $node_Flex_Storage_Add_on_count ))
            elif [[ ${lic_list[$ind]} =~ "Instant" ]]; then
                node_Instant_On_count=${count_list[$ind]}
                exi_Instant_on_count=$(( $exi_Instant_on_count + ${count_list[$ind]} ))
            fi
        done
    else
        #extract license and its count
        lic_list=(`echo "$installed_license" | awk -F "[ :|=]" '{print $3}'`)
        count_list=(`echo "$installed_license" | awk -F "[ :|=]" '{print $NF}'`)

        for ind in ${!lic_list[@]}
        do
            echo_n "${count_list[$ind]} LTU(s) of HPE Serviceguard for linux - ${lic_list[$ind]}"
            if [[ ${lic_list[$ind]} =~ "Instant" ]]; then
                node_Instant_On_count=${count_list[$ind]}
                exi_Instant_on_count=$(( $exi_Instant_on_count + $node_Instant_On_count ))
            elif [[ ${lic_list[$ind]} =~ "Base" ]]; then
                node_Base_count=${count_list[$ind]}
                exi_Base_count=$(( $exi_Base_count + $node_Base_count ))
            elif [[ ${lic_list[$ind]} =~ "Advance" ]]; then
                node_Advance_count=${count_list[$ind]}
                exi_Advance_count=$(( $exi_Advance_count + $node_Advance_count ))
            elif [[ ${lic_list[$ind]} =~ "Enterprise" ]]; then
                node_Enterprise_count=${count_list[$ind]}
                exi_Enterprise_count=$(( $exi_Enterprise_count + $node_Enterprise_count ))
            elif [[ ${lic_list[$ind]} =~ "Premium" ]]; then
                node_Premium_count=${count_list[$ind]}
                exi_Premium_count=$(( $exi_Premium_count + $node_Premium_count ))
            elif [[ ${lic_list[$ind]} =~ "Flex" ]]; then
                node_Flex_Storage_Add_on_count=${count_list[$ind]}
                exi_Flex_Storage_Add_on_count=$(( $exi_Flex_Storage_Add_on_count + $node_Flex_Storage_Add_on_count ))
            fi
        done
    fi
}
function print_curr_lic
{
    echo_f "node:$node|license_version:$ver|license_details:$1|license_type=$2"
    echo_f "node:$node|license_version:$ver|license_details:$1|license_type:$2|license_genre=$3"
    echo_f "node:$node|license_version:$ver|license_details:$1|license_type:$2|license_count=$4"
}
function print_lic_in_fline
{
    if [[ $fline_flag -eq 1 ]]; then
        if [[ $sg15_flag -eq 1 ]]; then
            ver="v15"
        else
            ver="v12"
        fi
        echo_f "node:$node|license_version=$ver"
        echo_f "node:$node|license_version:$ver|license_details=current"
        if [[ $no_lic_flag -eq 1 ]]; then
            echo_f "node:$node|license_version:$ver|license_details:current|license_status=invalid"
            echo_f "node:$node|license_version:$ver|license_details:current|license_type=invalid"
            echo_f "node:$node|license_version:$ver|license_details:current|license_type:invalid|license_genre=NA"
            echo_f "node:$node|license_version:$ver|license_details:current|license_type:invalid|license_count=NA"
            return
        fi
        echo_f "node:$node|license_version:$ver|license_details:current|license_status=valid"
        if [[ $node_Instant_On_count -ne 0 ]]; then
            print_curr_lic "current" "Instant-On" "Foundational" $node_Instant_On_count
        fi
        if [[ $node_Base_count -ne 0 ]]; then
             print_curr_lic "current" "Base" "Foundational" $node_Base_count
        fi
        if [[ $node_Advance_count -ne 0 ]]; then
             print_curr_lic "current" "Advance" "Foundational" $node_Advance_count
        fi
        if [[ $node_Enterprise_count -ne 0 ]]; then
             print_curr_lic "current" "Enterprise" "Foundational" $node_Enterprise_count
        fi
        if [[ $node_Premium_count -ne 0 ]]; then
             print_curr_lic "current" "Premium" "Foundational" $node_Premium_count
        fi
        if [[ $node_HA_DR_E7_count -ne 0 ]]; then
             print_curr_lic "current" "HA-DR-E7" "Foundational" $node_HA_DR_E7_count
        fi
        if [[ $node_HA_E5_count -ne 0 ]]; then
             print_curr_lic "current" "HA-E5" "Foundational" $node_HA_E5_count
        fi
        if [[ $node_SAP_Add_on_count -ne 0 ]]; then
             print_curr_lic "current" "SAP-Add-on" "Add-on" $node_SAP_Add_on_count
        fi
        if [[ $node_NFS_Add_on_count -ne 0 ]]; then
             print_curr_lic "current" "NFS-Add-on" "Add-on" $node_NFS_Add_on_count
        fi
        if [[ $node_Oracle_Add_on_count -ne 0 ]]; then
             print_curr_lic "current" "Oracle-Add-on" "Add-on" $node_Oracle_Add_on_count
        fi
        if [[ $node_MSSQL_Add_on_count -ne 0 ]]; then
             print_curr_lic "current" "MSSQL-Add-on" "Add-on" $node_MSSQL_Add_on_count
        fi
        if [[ $node_Flex_Storage_Add_on_count -ne 0 ]]; then
             print_curr_lic "current" "Flex-Storage-Add-on" "Add-on" $node_Flex_Storage_Add_on_count
        fi
    else
        if [[ $exi_Instant_on_count -ne 0 ]]; then
            echo_n "$exi_Instant_on_count LTU(s) of HPE Serviceguard for linux - Instant-On"
        fi
        if [[ $exi_Base_count -ne 0 ]]; then
            echo_n "$exi_Base_count LTU(s) of HPE Serviceguard for linux - Base"
        fi
        if [[ $exi_Advance_count -ne 0  ]];then
            echo_n "$exi_Advance_count LTU(s) of HPE Serviceguard for linux - Advance"
        fi
        if [[ $exi_Enterprise_count -ne 0  ]]; then
            echo_n "$exi_Enterprise_count LTU(s) of HPE Serviceguard for linux - Enterprise"
        fi
        if [[ $exi_Premium_count -ne 0  ]]; then
            echo_n "$exi_Premium_count LTU(s) of HPE Serviceguard for linux - Premium"
        fi
        if [[ $exi_HA_DR_E7_count -ne 0  ]]; then
            echo_n "$exi_HA_DR_E7_count LTU(s) of HPE Serviceguard for linux - HA-DR-E7"
        fi
        if [[ $exi_HA_E5_count -ne 0 ]];then
            echo_n "$exi_HA_E5_count LTU(s) of HPE Serviceguard for linux - HA_E5"
        fi
        if [[ $exi_NFS_Add_on_count -ne 0 ]]; then
            echo_n "$exi_NFS_Add_on_count LTU(s) of HPE Serviceguard for linux - NFS-Add-on"
        fi
        if [[ $exi_SAP_Add_on_count -ne 0 ]]; then
            echo_n "$exi_SAP_Add_on_count LTU(s) of HPE Serviceguard for linux - SAP-Add-on"
        fi
        if [[ $exi_Oracle_Add_on_count -ne 0 ]]; then
            echo_n "$exi_Oracle_Add_on_count LTU(s) of HPE Serviceguard for linux - Oracle-Add-on"
        fi
        if [[ $exi_MSSQL_Add_on_count -ne 0 ]]; then
            echo_n "$exi_MSSQL_Add_on_count LTU(s) of HPE Serviceguard for linux - MSSQL-Add-on"
        fi
        if [[ $exi_Flex_Storage_Add_on_count -ne 0 ]]; then
            echo_n "$exi_Flex_Storage_Add_on_count LTU(s) of HPE Serviceguard for linux - Flex-Storage-Add-on"
        fi
        echo_n
    fi
}
function calc_license_req
{
    node=$1
    vm_flag=0
    no_lic_flag=0
    node_license=""
    echo_n "Node: $node"
    echo_n "Current Serviceguard configuration on $node"
    curr_node=$(host=`hostname`; echo ${host%%.*})
    if [[ sg_flag -eq 1 ]]; then
        if [[ $node == $curr_node ]]; then
            sgversion=`cmversion`
            license_installed=`cmgetlicense`
        else
            sgversion=`cmexec $node cmversion 2> /dev/null`
            if [[ -z $sgversion ]]; then
                echo_n "Unable to detect serviceguard version installed. Run cmmaplicense directly on $node"
                echo
                continue
            fi
            license_installed=`cmexec $node cmgetlicense 2> /dev/null`
        fi
        if [[ $sgversion =~ "15." ]]; then
            sg15_flag=1
        else
            sg15_flag=0
        fi
        installed_license=`echo "$license_installed" | grep "Number"`
        if ! [[ -z $installed_license ]]; then
            echo_n "Serviceguard version installed: $sgversion"
            echo_n "Serviceguard License(s) installed: "
            save_lic_count $sgversion
            echo_n
        else
            echo_n "Serviceguard version installed: $sgversion"
            echo_n "No valid license found on $node"
            echo_n
            save_lic_count $sgversion
            no_lic_flag=1
        fi
    fi
    #get the number of license required
    calculate_license_req $node
    if [[ $? -ne 0 ]]; then
        continue;
    fi
    
    #flag to check if there are any workloads in a given node
    workload_flag=0
    wrkld_list=()
    rpo_list=()
    multitarget_list=()
    pushbutton_flag=0
    lic_list=()
    E7_flag=0
    E5_flag=0
    FlexStorage_flag=0

    #get all package name
    package_list=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $3 == "node" && $4 == "'$node'" && $5 == "name"  {print $2}'`

    for pkg in $package_list
    do
        module_list=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "module_name" && $5 == "module_name"   {print $6}'`
        for module  in $module_list
        do
            scale_out="no"
            if [[ $module =~ "dts/cc" || $module =~ "pb/pb" ]]; then
                workload_flag=1
                pushbutton_flag=1
                E5_flag=0
                E7_flag=1
            fi
            if [[ $module =~ "sgesap/hdbtier" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "HANA" ]]; then
                    wrkld_list+=( "HANA" )
                fi
                if ! [[ ${multitarget_list[@]} =~ "HANA" ]]; then
                    multitarget_list+=( "HANA" )
                fi
                E5_flag=0
                E7_flag=1
                if ! [[ ${lic_list[@]} =~ "SAP-Add-on" ]]; then
                    lic_list+=( "SAP-Add-on" )
                fi

            elif [[ $module =~ "sgesap" ]]; then
                sync_time_tol=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "sgesap/hdbprimary/hdb_sync_time_tolerance" {print $4}'`
                sync_logpos_tol=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "sgesap/hdbprimary/hdb_sync_logpos_tolerance" {print $4}'`
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "HANA" ]]; then
                    wrkld_list+=( "HANA" )
                fi
                if [[  $sync_time_tol -gt 0 || $sync_logpos_tol -gt 0 ]]; then
                    if ! [[ ${rpo_list[@]} =~ "HANA" ]]; then
                        rpo_list+=( "HANA" )
                    fi
                elif [[ $module =~ "sg/sc" ]]; then
                    E7_flag=1
                    scale_out="yes"
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
                if ! [[ ${lic_list[@]} =~ "SAP-Add-on" ]]; then
                    lic_list+=( "SAP-Add-on" )
                fi
            fi

            if [[ $module =~ "tkit/oracle" ]]; then
                workload_flag=1
                rpo_res=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "'$module'/RPO_LIMIT"  {print $4}'`
                if [[ ! -z $rpo_res  || $rpo_res -gt 0 ]]; then
                    if ! [[ ${rpo_list[@]} =~ "Oracle" ]]; then
                        rpo_list+=( "Oracle" )
                    fi
                fi
                if ! [[ ${wrkld_list[@]} =~ "Oracle" ]]; then
                    wrkld_list+=( "Oracle" )
                fi

                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
                if ! [[ ${lic_list[@]} =~ "Oracle-Add-on" ]]; then
                    lic_list+=( "Oracle-Add-on" )
                fi
            fi

            if [[ $module =~ "tkit/dataguard" ]]; then
                if [[ $module =~ "tkit/dataguard/dataguard_multi_dc" ]]; then
                    workload_flag=1
                    if ! [[ ${wrkld_list[@]} =~ "Dataguard" ]]; then
                        wrkld_list+=( "Dataguard" )
                    fi
                    if ! [[ ${multitarget_list[@]} =~ "Dataguard" ]]; then
                        multitarget_list+=( "Dataguard" )
                    fi 
                    E7_flag=1
                    if ! [[ ${lic_list[@]} =~ "Oracle-Add-on" ]]; then
                        lic_list+=( "Oracle-Add-on" )
                    fi
               else
                    rpo_res=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "'$module'/RPO_LIMIT"  {print $4}'`
                    workload_flag=1
                    if ! [[ ${wrkld_list[@]} =~ "Dataguard" ]]; then
                        wrkld_list+=( "Dataguard" )
                    fi
                    if [[ $rpo_res -gt 0 ]]; then
                        if ! [[ ${rpo_list[@]} =~ "Dataguard" ]]; then
                            rpo_list+=( "Dataguard" )
                        fi
                    fi
                    if [[ E7_flag -eq 0 ]]; then     
                        E5_flag=1
                    fi
                    if ! [[ ${lic_list[@]} =~ "Oracle-Add-on" ]]; then
                            lic_list+=( "Oracle-Add-on" )
                    fi
                fi
            fi

            if [[ $module =~ "xdc/xdc" ]]; then
                rpo_res=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "'$module'/RPO_TARGET"  {print $4}'`
                #check if that is greater than zero
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "XDC" ]]; then
                    wrkld_list+=( "XDC" )
                fi
                if [[ $rpo_res -gt 0 ]]; then
                    if ! [[ ${rpo_list[@]} =~ "XDC" ]]; then
                        rpo_list+=( "XDC" )
                    fi
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
            fi

            if [[ $module =~ "sgemssql/mssqldbinstance" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "MSSQL" ]]; then
                    wrkld_list+=( "MSSQL" )
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
                if ! [[ ${lic_list[@]} =~ "MSSQL-Add-on" ]]; then
                    lic_list+=( "MSSQL-Add-on" )
                fi
            fi

            if [[ $module =~ "sgemssql/mssqlaoai" ]]; then
                node_names=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "sgemssql/mssqlaoai/nodename" && $5 == "sgemssql/mssqlaoai/nodename"  {print $6}'`
                num_node_names=( $node_names )
                if [[ ${#num_node_names[@]} -gt 2 ]]; then
                    workload_flag=1
                    if ! [[ ${wrkld_list[@]} =~ "MSSQL" ]]; then
                        wrkld_list+=( "MSSQL" )
                    fi
                    if ! [[ ${multitarget_list[@]} =~ "MSSQL" ]]; then
                        multitarget_list+=( "MSSQL" )
                    fi
                    E7_flag=1
                    if ! [[ ${lic_list[@]} =~ "MSSQL-Add-on" ]]; then
                        lic_list+=( "MSSQL-Add-on" )
                    fi
                else
                    workload_flag=1
                    if ! [[ ${wrkld_list[@]} =~ "MSSQL" ]]; then
                        wrkld_list+=( "MSSQL" )
                    fi
                    
                    if [[ E7_flag -eq 0 ]]; then     
                        E5_flag=1
                    fi
                    if ! [[ ${lic_list[@]} =~ "MSSQL-Add-on" ]]; then
                        lic_list+=( "MSSQL-Add-on" )
                    fi
                fi
            fi

            if [[ $module =~ "tkit/db2" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "DB2" ]]; then
                    wrkld_list+=( "DB2" )
                fi
                if [[ E7_flag -eq 0 ]]; then     
                    E5_flag=1
                fi
            fi

            if [[ $module =~ "tkit/ppas" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "Postgres" ]]; then
                    wrkld_list+=( "Postgres" )
                fi
                if [[ E7_flag -eq 0 ]]; then     
                    E5_flag=1
                fi
            fi

            if [[ $module =~ "tkit/sybase" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "Sybase" ]]; then
                    wrkld_list+=( "Sybase")
                fi
                if [[ E7_flag -eq 0 ]]; then     
                    E5_flag=1
                fi
            fi

            if [[ $module =~ "tkit/kvm" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "KVM" ]]; then
                    wrkld_list+=( "KVM" )
                fi
                if [[ E7_flag -eq 0 ]]; then     
                    E5_flag=1
                fi
            fi
            if [[ $module =~ "sgenss/rf_" ]]; then 
                node_names=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "sgenss/rf_" && $5 == "sgenss/rf_"  {print $6}'`
                num_node_names=( $node_names )
                if [[ ${#num_node_names[@]} -gt 2 ]]; then
                    workload_flag=1
                    if ! [[ ${wrkld_list[@]} =~ "DRBD" ]]; then
                        wrkld_list+=( "DRBD" )
                    fi
                    if ! [[ ${multitarget_list[@]} =~ "DRBD" ]]; then
                        multitarget_list+=( "DRBD" )
                    fi
                    E5_flag=0
                    E7_flag=1
                    FlexStorage_flag=1

                else
                    rpo_res=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "'$module'/RPO_THRESHOLD"  {print $4}'`
                    workload_flag=1
                    if ! [[ ${wrkld_list[@]} =~ "DRBD" ]]; then
                        wrkld_list+=( "DRBD" )
                    fi
                    if [[ $rpo_res -gt 0 ]]; then
                        if ! [[ ${rpo_list[@]} =~ "DRBD" ]]; then
                            rpo_list=( "DRBD" )
                        fi
                    fi
                    if [[ E7_flag -eq 0 ]]; then
                        E5_flag=1
                    fi
                    FlexStorage_flag=1
                fi
            fi

            if [[ $module =~ "dts/mc3parrc" ]]; then
                rpo_data=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "dts/3parrc/RPO_THRESHOLD"  {print $4}'`
                noncur_data=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "dts/3parrc/AUTO_NONCURDATA" {print $4}'`
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "3PAR" ]]; then
                    wrkld_list+=( "3PAR" )
                fi
                if [[ $rpo_data -gt 0 && $noncur_data -gt 0 ]]; then
                    if ! [[ ${rpo_list[@]} =~ "3PAR" ]]; then
                        rpo_list+=( "3PAR" )
                    fi
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
            fi

            if [[ $module =~ "dts/mcrcopy" ]]; then
                rpo_data=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "dts/rcopy/RPO_THRESHOLD"  {print $4}'`
                noncur_data=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "dts/rcopy/AUTO_NONCURDATA"  {print $4}'`
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "Primera" ]]; then
                    wrkld_list+=( "Primera" )
                fi
                if [[ $rpo_data -gt 0 && $noncur_data -gt 0 ]]; then
                    if ! [[ ${rpo_list[@]} =~ "Primera" ]]; then
                        rpo_list+=( "Primera" )
                    fi
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
            fi
            if [[ $module =~ "dts/mcsadr" ]]; then
                mcsadr_rpo_threshold=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "dts/mcsadr/RPO_THRESHOLD"  {print $4}'`
                mcsadr_auto_noncurdata=`echo "$view" | awk -F "[ :|=]" '$1 == "package" && $2 == "'$pkg'" && $3 == "dts/mcsadr/AUTO_NONCURDATA"  {print $4}'`
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "SADR" ]]; then
                    wrkld_list+=( "SADR")
                fi
                if [[ $mcsadr_rpo_threshold -gt 0  && $mcsadr_auto_noncurdata -gt 0 ]]; then
                    if ! [[ ${rpo_list[@]} =~ "SADR" ]]; then
                        rpo_list+=( "SADR" )
                    fi
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
            fi

            if [[ $module =~ "dts/mcxpca" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "XP" ]]; then
                    wrkld_list+=( "XP")
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
            fi

            if [[ $module =~ "dts/mc3parsldrc" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "3PAR_SLD" ]]; then
                    wrkld_list+=( "3PAR_SLD" )
                fi
                E7_flag=1
            fi
            if [[ $module =~ "dts/mcsldrcopy" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "Primera SLD" ]]; then
                    wrkld_list+=( "Primera SLD" )
                fi
                E7_flag=1
            fi

            if [[ $module =~ "tkit/nfs/nfs" ]]; then
                workload_flag=1
                if ! [[ ${wrkld_list[@]} =~ "NFS" ]]; then
                    wrkld_list+=( "NFS" )
                fi
                if [[ E7_flag -eq 0 ]]; then
                    E5_flag=1
                fi
                if ! [[ ${lic_list[@]} =~ "NFS-Add-on" ]]; then
                    lic_list+=( "NFS-Add-on" )
                fi
            fi
        done
    done
    total_license=0
    echo_n "Checking the node configuration..."
    if [[ vm_flag -eq 1 ]]; then
        echo_n "Number of vCPU(s) : $vcpu"
        echo_f "node:$node|compute_type=vcpu"
        echo_f "node:$node|compute_type=vcpu|vcpus=$vcpu"
    else
        echo_n "Number of Core(s) : $cores"
        echo_f "node:$node|compute_type=cores"
        echo_f "node:$node|compute_type=cores|cores=$cores"
    fi
    if [[ $workload_flag -ne 0 ]]; then
        echo_n " Cluster configured : yes. Workloads Detected: Yes. "
        printf -v wrkld '%s,' "${wrkld_list[@]}"
        echo_n -n "Workload deployed : "
        echo_n $(echo ${wrkld_list[@]}) | tr ' ' ','
        if [[ ${#multitarget_list[@]} -ne "" ]]; then
            echo_n -n "Multi target : Yes("
            echo_n -n $(echo ${multitarget_list[@]}) | tr ' ' ','
            echo_n ")"
        fi
        if [[ pushbutton_flag -eq 1 ]]; then
            echo_n "Push Button Recovery : Yes"
        fi
        if [[ ${#rpo_list[@]} -gt 0 ]]; then
            echo_n -n "RPO configured : Yes("
            echo_n -n $(echo ${rpo_list[@]}) | tr ' ' ','
            echo_n ")"
        fi
        if [[ $fline_flag -eq 1 && $workload_flag -ne 0 ]]; then
            for wrkld in ${wrkld_list}
            do
                echo_f "node:$node|workload_type=$wrkld"
                if [[ $wrkld =~ $multitarget_list ]]; then
                    echo_f "node:$node|workload_type:$wrkld|multi-target=yes"
                else
                    echo_f "node:$node|workload_type:$wrkld|multi-target=no"
                fi
                echo_f "node:$node|workload_type:$wrkld|scale-out=$scale_out"
            done
        fi
        if [[ $fline_flag -eq 1 ]]; then
            print_lic_in_fline
        fi
        ver="v15"
        echo_n
        echo_f "node:$node|license_version=v15"
        echo_f "node:$node|license_version:v15|license_details=required"
        if [[ E7_flag -eq 1 ]]; then
            if [[ $sg15_flag -eq 1 ]]; then
                if [[ $node_HA_DR_E7_count -lt $license_required ]]; then
                    delta=$(( $license_required - $node_HA_DR_E7_count ))
                    node_license+="    $bullet_char Foundational: $delta LTU(s) of HPE Serviceguard for linux HA-DR-E7"
                    node_license+=$newline_char
                    total_license=$(( $total_license + $delta ))
                    HA_DR_E7_count=$(( $HA_DR_E7_count + $delta ))
                fi
            else
                echo_n "For upgrading node $node to HPE Serviceguard for linux A.15.00.00 and above, requires following licenses"
                node_license+="    $bullet_char Foundational: $license_required LTU(s) of HPE Serviceguard for linux HA-DR-E7"
                node_license+=$newline_char
            fi
            print_curr_lic "required" "HA-DR-E7" "Foundational" $license_required
        else
            if [[ $sg15_flag -eq 1 ]]; then
                if [[ $node_HA_E5_count -lt $license_required ]]; then
                    #check if node has sufficent HA_DR_E7 licenses
                    if [[ $node_HA_DR_E7_count -lt $license_required ]]; then
                        delta=$(( $license_required - $node_HA_E5_count ))
                        node_license+="    $bullet_char Foundational: $delta LTU(s) of HPE Serviceguard for linux HA-E5"
                        node_license+=$newline_char
                        total_license=$(( $total_license + $delta ))
                        HA_E5_count=$(( $HA_E5_count + $delta ))
                    fi
                fi
            else    #sg version is < 15; calculate the total_license based on license_required per node
            node_license+="    $bullet_char Foundational: $license_required LTU(s) of HPE Serviceguard for linux HA-E5"
                node_license+=$newline_char
                total_license=$(( $total_license + $license_required ))
                HA_E5_count=$(( $HA_E5_count + $license_required ))
            fi
            print_curr_lic "required" "HA-E5" "Foundational" $license_required
        fi
        if [[ ${#lic_list[@]} -gt 0 ]]; then
            for lic_name in ${lic_list[@]}
            do
                #if E7 and SAP-Add-on is already present, skip NFS-Add-on
                if ! [[ $lic_name == "NFS-Add-on" && ${lic_list[@]} =~ "SAP-Add-on" && E7_flag -eq 1 ]]; then
                    if [[ $sg15_flag -eq 1 ]]; then
                        delta=0
                        #check if required licenses are already installed, else calculate the delta
                        if [[ $lic_name == "NFS-Add-on" ]]; then
                            if [[ $node_NFS_Add_on_count -lt  $license_required ]]; then 
                                delta=$(( $license_required - $node_NFS_Add_on_count ))
                                NFS_Add_on_count=$(( $NFS_Add_on_count + $delta ))
                                node_license+="    $bullet_char $delta LTU(s) of HPE Serviceguard for linux $lic_name"
                                node_license+=$newline_char
                            fi
                        elif [[ $lic_name == "SAP-Add-on" ]]; then
                            if [[ $node_SAP_Add_on_count -lt  $license_required ]]; then 
                                delta=$(( $license_required - $node_SAP_Add_on_count ))
                                SAP_Add_on_count=$(( $SAP_Add_on_count + $delta ))
                                node_license+="    $bullet_char $delta LTU(s) of HPE Serviceguard for linux $lic_name"
                                node_license+=$newline_char
                            fi
                        elif [[ $lic_name == "Oracle-Add-on" ]]; then
                            if [[ $node_Oracle_Add_on_count -lt  $license_required ]]; then 
                                delta=$(( $license_required - $node_Oracle_Add_on_count ))
                                Oracle_Add_on_count=$(( $Oracle_Add_on_count + $delta ))
                                node_license+="    $bullet_char $delta LTU(s) of HPE Serviceguard for linux $lic_name"
                                node_license+=$newline_char
                            fi
                        elif [[ $lic_name == "MSSQL-Add-on" ]]; then
                            if [[ $node_MSSQL_Add_on_count -lt  $license_required ]]; then 
                                delta=$(( $license_required - $node_MSSQL_Add_on_count ))
                                MSSQL_Add_on_count=$(( $MSSQL_Add_on_count + $delta ))
                                node_license+="    $bullet_char $delta LTU(s) of HPE Serviceguard for linux $lic_name"
                                node_license+=$newline_char
                            fi
                        fi
                        total_license=$(( $total_license + $delta ))
                    else    #sg version is < 15; calculate the total_license based on license_required per node
                        node_license+="    $bullet_char $license_required LTU(s) of HPE Serviceguard for linux $lic_name"
                        node_license+=$newline_char
                        if [[ $lic_name == "NFS-Add-on" ]]; then
                            NFS_Add_on_count=$(( $NFS_Add_on_count + $license_required ))
                        elif [[ $lic_name == "SAP-Add-on" ]]; then
                            SAP_Add_on_count=$(( $SAP_Add_on_count + $license_required ))
                        elif [[ $lic_name == "Oracle-Add-on" ]]; then
                            Oracle_Add_on_count=$(( $Oracle_Add_on_count + $license_required ))
                        elif [[ $lic_name == "MSSQL-Add-on" ]]; then
                            MSSQL_Add_on_count=$(( $MSSQL_Add_on_count + $license_required ))
                        fi
                        total_license=$(( $total_license + $license_required ))
                    fi
                    print_curr_lic "required" $lic_name "Add-on" $license_required
                fi
            done
        fi
        if [[ FlexStorage_flag -eq 1 ]]; then
            if [[ $node_Flex_Storage_Add_on_count -lt 1 && sg15_flag -eq 1 ]]; then
                node_license+="    $bullet_char 1 LTU(s) of HPE Serviceguard for linux Flex-Storage-Add-on"
                node_license+=$newline_char
            else    #sg version is < 15; calculate the total_license based on license_required per node
                node_license+="    $bullet_char 1 LTU(s) of HPE Serviceguard for linux Flex-Storage-Add-on"
                node_license+=$newline_char
                total_license=$(( $total_license + 1 ))
                Flex_Storage_Add_on_count=$(( $Flex_Storage_Add_on_count + 1 ))
            fi
            print_curr_lic "required" "Flex-Storage-Add-on" "Add-on" "1"
        fi
    else
        echo_n "Cluster configured : yes. Workloads Detected: No "
        echo_n
        if [[ $fline_flag -eq 1 ]]; then
            print_lic_in_fline
        fi
        ver="v15"
        echo_f "node:$node|license_version=v15"
        echo_f "node:$node|license_version:v15|license_details=required"
        if [[ $sg15_flag -eq 1 ]]; then
            if [[ $node_HA_E5_count -lt $license_required ]]; then
                #check if sufficient HA-DR-E7 licenses are present
                if [[ $node_HA_DR_E7_count -ne 0 && $node_HA_DR_E7_count -lt $license_required ]]; then
                    delta=$(( $license_required - $node_HA_DR_E7_count ))
                else
                    delta=$(( $license_required - $node_HA_E5_count ))
                fi
                total_license=$(( $total_license + $delta ))
                HA_E5_count=$(( $HA_E5_count + $delta ))
                node_license+="    $bullet_char Foundational: $delta LTU(s) of HPE Serviceguard for linux HA-E5"
                node_license+=$newline_char
            fi
        else    #sg version is < 15; calculate the total_license based on license_required per node
            total_license=$(( $total_license + $license_required ))
            HA_E5_count=$(( $HA_E5_count + $license_required ))
            node_license+="    $bullet_char Foundational: $license_required LTU(s) of HPE Serviceguard for linux HA-E5"
            node_license+=$newline_char
        fi
        print_curr_lic "required" "HA-E5" "Foundational" "$license_required"
    fi
    if [[ $sg15_flag -eq 1 ]]; then
        echo_n "For upgrading node $node, requires following licenses"
        if [[ $total_license -eq 0 ]]; then
            echo_n "No extra licenses are required for the required workloads deployed."
        else
            echo_n "Total number of license(s) required for $node: $total_license"
            if [[ $fline_flag -ne 1 ]]; then
                printf "$node_license"
            fi
        fi
    else
        echo_n "For upgrading node $node to HPE Serviceguard for linux A.15.00.00 and above, requires following licenses"
        echo_n "Total number of license(s) required for $node: $total_license"
        if [[ $fline_flag -ne 1 ]]; then
            printf "$node_license"
        fi
    fi
    #calculate the total count of license required for cluster
    cluster_license_count=$(( $cluster_license_count + $total_license ))
    echo_n
}

function print_summary
{
    echo_n "Summary : $cluster_name "
    #Existing cluster's details
    echo_n "HPE Serviceguard version installed: $sgversion"
    echo_n "HPE Serviceguard for linux License(s) installed: "
    if [[ $exi_Advance_count -eq 0 && $exi_Base_count -eq 0 && $exi_Enterprise_count -eq 0 && \
        $exi_Premium_count -eq 0 && $exi_Flex_Storage_Add_on_count -eq 0 && $exi_HA_DR_E7_count -eq 0 && \
        $exi_HA_E5_count -eq 0 && $exi_Instant_on_count -eq 0 && \
        $exi_MSSQL_Add_on_count -eq 0 && $exi_NFS_Add_on_count -eq 0 && \
        $exi_Oracle_Add_on_count -eq 0 && $exi_SAP_Add_on_count -eq 0 ]]; then
        echo_n "No valid license found"
    fi
    if [[ $fline_flag -ne 1 ]]; then
        print_lic_in_fline
    fi
    
    #requirements identified by cmmaplicense
    if [[ sg15_flag -eq 0 ]]; then
        echo_n "For upgrading cluster $cluster_name to HPE Serviceguard for linux A.15.00.00 and above, requires following licenses"
        echo_n "Total number of license(s) required: $cluster_license_count"
    else
        if [[ $cluster_license_count -eq 0 ]]; then
            echo_n "For upgrading cluster $cluster_name, requires following licenses"
            echo_n "No extra licenses are required for the current workloads deployed."
        else
            echo_n "Total number of extra license(s) required: $cluster_license_count"
        fi
    fi
    if [[ $fline_flag -ne 1 ]]; then
        if [[ $HA_E5_count -ne 0 ]]; then
            printf "    $bullet_char $HA_E5_count LTU(s) of HPE Serviceguard for linux - HA_E5\n"
        fi
        if [[ $HA_DR_E7_count -ne 0 ]]; then
            printf "    $bullet_char $HA_DR_E7_count LTU(s) of HPE Serviceguard for linux - HA-DR-E7\n"
        fi
        if [[ $SAP_Add_on_count -ne 0 ]]; then
            printf "    $bullet_char $SAP_Add_on_count LTU(s) of HPE Serviceguard for linux - SAP-Add-on\n"
        fi
        if [[ $NFS_Add_on_count -ne 0 ]]; then
            printf "    $bullet_char $NFS_Add_on_count LTU(s) of HPE Serviceguard for linux - NFS-Add-on\n"
        fi
        if [[ $Oracle_Add_on_count -ne 0 ]]; then
            printf "    $bullet_char $Oracle_Add_on_count LTU(s) of HPE Serviceguard for linux - Oracle-Add-on\n"
        fi
        if [[ $MSSQL_Add_on_count -ne 0 ]]; then
            printf "    $bullet_char $MSSQL_Add_on_count LTU(s) of HPE Serviceguard for linux - MSSQL-Add-on\n"
        fi
        if [[ $Flex_Storage_Add_on_count -ne 0 ]]; then
            printf "    $bullet_char $Flex_Storage_Add_on_count LTU(s) of HPE Serviceguard for linux - Flex-Storage-Add-on\n"
        fi
        echo
    fi
}

function echo_f
{
    :;
}

function echo_n
{
    echo $@
}

function usage
{
    echo "Functionality: "
    echo "Its a script that explore the configuration of current deployed solution and its platform then suggest the required license and its count for Serviceguard for Linux A.15.00.00"
    echo "The script would discover the following "
    echo "    1. Number of cores/vCPUs"
    echo "    2. Workload deployed "
    echo "    3. Multi target "
    echo "    4. CC/push button recovery "
    echo "    5. RPO configured (if it is > 0)"
    echo
    echo "Usage:"
    echo "    cmmaplicense"
    echo "    The script must be run on any node of the cluster & once per cluster"
    echo
    echo "OPTIONS"
    echo "    -n    Name of the node(s) on which operation needs to be performed."
    echo "          Ensure that ssh connection has been eshtablished between the nodes before running, else it will ask for password"
    echo "          This option should only be used when serviceguard is not installed or serviceguard cluster is not formed"
    echo "    -f    line"
    echo "          Provides maplicense output in parasble format. This output can be uploaded and viewed in SGMGR+ GUI."
    echo "          Should not be used with -n option"
    exit 1
}

if [[ $@ =~ "-n" && $@ =~ "-f" ]]; then
    echo "-f and -n should not be used together"
    exit 1
fi

while getopts ":hn:f:" option; do
    case "$option" in
        h)  usage
            ;;
        n)
            if [[ $n_flag -eq 0 ]]; then
                echo_n "cmmaplicense version: 2.5"
                echo_n
            fi
            n_flag=1
            node="$OPTARG"
            n_flag=1
            check_for_cluster $node
            echo_n
            ;;
        f)
            if [[ "$OPTARG" != "line" ]]; then
                echo "Invalid option"
                usage
            fi
            fline_flag=1
            # Redirect stdout to /dev/null
            echo_n() { :; }
            echo_f() { printf "$1 \n"; }
            ;;
        *)
            echo "Invalid Option"
            usage
            ;;
    esac
done
shift $(( OPTIND - 1))

if [[ n_flag -eq 1 ]]; then
    exit 1
fi

check_for_cluster
if [[ $? -eq 0 ]]; then
    exit 1
fi

echo_n "cmmaplicense version: 2.5"
echo_n

#get all the nodelist
nodelist=`echo "$view" | awk -F "[ :|=]" '$1 == "node" && $3 == "name"  {print $4}'`

cluster_name=`echo "$view" | awk -F "[ :|=]" '$1 == "name" {print $2}'`
echo_f "cluster=${cluster_name}"

pushbutton=`echo "$view" | grep -e "dts/cc" -e "pb/pb" `
if [[ -z "$pushbutton" ]]; then
    echo_f "cluster:${cluster_name}|push_button=no"
else
    echo_f "cluster:${cluster_name}|push_button=yes"
fi

for node in $nodelist
do
    echo_f "cluster:${cluster_name}|node_name=${node}"
done

echo_n "Serviceguard Cluster : $cluster_name"
for node in $nodelist
do
    calc_license_req $node
done

print_summary
