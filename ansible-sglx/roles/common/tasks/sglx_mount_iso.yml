---
#####################################################################
# (C) Copyright 2023 Hewlett Packard Enterprise Development LP.
#####################################################################

- include_vars: roles/common/vars/main.yml

- name: Check and set if NFS is specified in the mount location
  set_fact:
      nfs_mount_path: True
  when: iso_location is regex("^nfs://*")
  ignore_errors: true

- name: Check and set if Local file path is specified in the mount location
  set_fact:
      local_mount_path: True
  when: iso_location is regex("^file://*")
  ignore_errors: true

- name: Check if the ISO parameters contain NFS location
  set_fact:
      nfs_mount_dir: '{{ iso_location | 
                        regex_replace("^nfs://","") | 
                        regex_replace("(.*)/(.*)","\1@\2") | 
                        regex_replace("(.*)@(.*)","\1/") | 
                        regex_replace("(.+?)/(.*)","\1:/\2") }}'
      nfs_iso_name: '{{ iso_location | 
                        regex_replace("^nfs://","") | 
                        regex_replace("(.*)/(.*)","\1@\2") | 
                        regex_replace("(.*)@(.*)","\2") }}'
  when: nfs_mount_path == True
  ignore_errors: true

- name: Check if the ISO parameters contain local node location
  set_fact:
       dest_iso_path: '{{ iso_location | 
                          regex_replace("^file://","/") }}'
  when: local_mount_path == True
  ignore_errors: true

- name: Copy the ISO to nodes where Serviceguard is not installed
  synchronize:
      src: "{{ iso_location }}"
      dest: "{{ dest_iso_path }}"
      rsync_timeout: 60
  register: iso_sync_op
  when: nfs_mount_path != True and local_mount_path != True
  ignore_errors: true

# required to be initialized when NFS location(nfs://) is provided or 
# local path is provided using (file://) option. This will ensure that missing 
# variable(iso_sync_op) condition is satisfied.
- set_fact:
    iso_sync_op:
      rc: 0
  when: nfs_mount_path == True or local_mount_path == True

- set_fact:
      mount_result:
          rc: 1
          opmsg: "Failed to copy the ISO to node {{ ansible_hostname }}"
  when: nfs_mount_path != True and iso_sync_op.rc != 0 and local_mount_path != True

- name: Check if the copy was successful and print failure if unsucessfull
  fail:
     msg: " Failed to SYNC ISO. Retry.. on {{ ansible_hostname }}"
  when: nfs_mount_path != True and iso_sync_op.rc != 0 and local_mount_path != True

- name: Mount NFS path for ISO on node
  mount:
     path: "{{ nfs_mount_loc }}"
     src: "{{ nfs_mount_dir }}"
     fstype: nfs
     state: mounted
  when: nfs_mount_path == True
  ignore_errors: true

- name: Check if NFS mount was successful
  shell: df -kh | grep -w {{ nfs_mount_loc }}
  register: nfs_mount_result
  when: nfs_mount_path == True
  ignore_errors: true
 
- set_fact:
      mount_result:
          rc: 1
          opmsg: "Failed to mount the NFS mount path on node {{ ansible_hostname }}"
  when: nfs_mount_path == True and nfs_mount_result.rc != 0

- set_fact:
     dest_iso_path: "{{ nfs_mount_loc }}/{{ nfs_iso_name }}"
  when: nfs_mount_path == True

- name: Mount ISO on node
  mount:
     path: "{{ mount_dir }}"
     src: "{{ dest_iso_path }}"
     fstype: iso9660
     state: mounted
  ignore_errors: true

- name: Check if ISO mount was successful
  shell: df -kh | grep -w {{ mount_dir }}
  register: iso_mount_result
  ignore_errors: true

- set_fact:
      mount_result:
          rc: 1
          opmsg: "Failed to mount the Serviceguard ISO on node {{ ansible_hostname }}"
  when: iso_mount_result.rc != 0

- set_fact:
      mount_result:
          rc: 0
          opmsg: "Successfully mounted the Serviceguard ISO on node {{ ansible_hostname }}"
  when: iso_mount_result.rc == 0
